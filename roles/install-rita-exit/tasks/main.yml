# Sets up rita exit as a system service
- include_tasks: backup.yml

- name: Check for Rita Exit binary
  local_action: stat path="{{playbook_dir}}/rita_exit"
  register: rita_exit_bin

- name: Rita bin not present, download latest release
  get_url:
    url: "{{rita_exit_bin_url}}"
    dest: "/usr/bin/rita_exit"
    mode: 0755
    force: true
  become: true
  when: not rita_exit_bin.stat.exists

- name: Copy rita-exit binary
  copy:
    src: "{{playbook_dir}}/rita_exit"
    dest: /usr/bin/rita_exit
    mode: 0755
  become: true
  when: rita_exit_bin.stat.exists

- name: Fail on nonsystemd systems
  fail:
    msg: "No support for non systemd services, please add support for your init system!"
  when: "ansible_service_mgr != 'systemd'"

- name: Stop the process to update config
  systemd:
    name: rita-exit
    state: stopped
    enabled: yes
  become: true
  ignore_errors: true

- name: Copy the rita-exit config
  template:
    src: rita_exit.toml.j2
    dest: /etc/rita-exit.toml
  become: true

- name: Open Rita port
  iptables:
    chain: INPUT
    protocol: "{{item[0]}}"
    destination_port: "{{item[1]}}"
    jump: ACCEPT
    ip_version: "{{item[2]}}"
    ctstate: NEW
  become: true
  with_nested:
    - ["tcp", "udp"]
    - ["{{rita_port}}", "{{bounty_port}}", "{{exit_registration_port}}"]
    - ["ipv4", "ipv6"]
  when: not container

- name: Open WireGuard port range
  iptables:
    chain: INPUT
    destination_port: "{{firewall_start_port}}:"
    protocol: udp
    ip_version: "{{item}}"
    jump: ACCEPT
    ctstate: NEW
  become: true
  with_items:
    - ipv4
    - ipv6
  when: not container

- name: Allow ping
  iptables:
    chain: INPUT
    protocol: icmp
    ip_version: "{{item}}"
    jump: ACCEPT
  become: true
  with_items:
    - ipv4
    - ipv6
  when: not container

- name: Tune sysctl file limits
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^fs.file-max="
    line: "fs.file-max=1073741824"
    state: present
  become: true

- name: Tune conntrack max
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^net.netfilter.nf_conntrack_max="
    line: "net.netfilter.nf_conntrack_max=524288"
    state: present
  become: true

- name: Tune sysctl ephemeral port limits
  lineinfile:
    path: /etc/sysctl.conf
    regexp: "^net.ipv4.ip_local_port_range="
    line: "net.ipv4.ip_local_port_range=8192 65535"
    state: present
  become: true

- name: Tune process soft limit
  lineinfile:
    path: /etc/security/limits.conf
    regexp: "^\\* soft"
    line: "* soft nofile 500000"
    state: present
  become: true

- name: Tune process hard limit
  lineinfile:
    path: /etc/security/limits.conf
    regexp: "^\\* hard"
    line: "* hard nofile 500000"
    state: present
  become: true

- name: Reload sysctl
  shell: "sysctl -p"
  become: true

- include_tasks: systemd.yml

- name: Configure IPv6 settings for direct peer interfaces
  lineinfile:
    path: /etc/sysconfig/network-scripts/ifcfg-{{item[0]}}
    state: present
    regexp: "^%{{item[1].regex}}"
    line: "{{item[1].line}}"
    backup: yes
  with_nested:
    - "{{ exit_direct_peer_interfaces}}"
    - [
        { line: "IPV6INIT=yes", regex: "IPV6INIT" },
        { line: "IPV6_AUTOCONF=no", regex: "IPV6_AUTOCONF" },
        { line: "IPV6_DEFROUTE=no", regex: "IPV6_DEFROUTE" },
        { line: "IPV6_FAILURE_FATAL=yes", regex: "IPV6_FAILURE_FATAL" },
        { line: "IPV6_PEERDNS=no", regex: "IPV6_PEERDNS" },
        { line: "ONBOOT=yes", regex: "ONBOOT" },
      ]
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Configure IPv6 settings for direct peer interfaces
  lineinfile:
    path: /etc/network/interfaces.d/ifcfg-{{item}}
    state: present
    line: "auto {{item}}"
    create: yes
  with_items: "{{ exit_direct_peer_interfaces}}"
  when: ansible_distribution == 'Debian'

- name: Add the 802.1q module
  shell: modprobe 8021q
  become: true
  when: ansible_distribution == 'Debian' and vlan_interface is defined

- name: Configure IPv6 settings for vlan host interface
  lineinfile:
    path: /etc/network/interfaces.d/ifcfg-{{vlan_interface}}
    state: present
    line: "iface {{vlan_interface}} inet6 auto"
    create: yes
  when: ansible_distribution == 'Debian' and vlan_interface is defined

- name: Set vlan host interface up
  shell: ifup {{vlan_interface}}
  when: ansible_distribution == 'Debian' and vlan_interface is defined

- name: Configure IPv6 settings for direct peer vlans
  lineinfile:
    path: /etc/network/interfaces.d/ifcfg-{{item}}
    state: present
    line: "iface {{item}} inet6 auto"
    create: yes
  with_items: "{{ exit_direct_peer_vlans }}"
  when: ansible_distribution == 'Debian'

- name: Configure IPv6 settings for direct peer vlans
  lineinfile:
    path: /etc/network/interfaces.d/ifcfg-{{item}}
    state: present
    line: " vlan-raw-device {{ vlan_interface }}"
    create: yes
  with_items: "{{ exit_direct_peer_vlans }}"
  when: ansible_distribution == 'Debian'

- name: set interfaces up
  shell: ifup {{item}}
  with_items: "{{ exit_direct_peer_interfaces}}"
  when: ansible_distribution == 'Debian'

- name: set interfaces up
  shell: ifup {{item}}
  with_items: "{{ exit_direct_peer_vlans }}"
  when: ansible_distribution == 'Debian'
